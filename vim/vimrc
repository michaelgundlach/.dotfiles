" Canonical version of this file and of the .vim directory is in git
" at git@github.com:michaelgundlach/dotfiles.git
" 

" **************** BASIC SETTINGS ******************  
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Make Y behave like other capitals - to end of line
map Y y$

" Put swapfiles in a central place instead of the current directory.
" Vim will use the first directory that exists.
set directory=/tmp/vim,/tmp,$HOME/Local\ Settings/Temp

" Same thing for backup files (see `:help backup`)
set backupdir=/tmp/vim,/tmp,$HOME/Local\ Settings/Temp

" Discard undo history when reloading a file (like `:e!`). For instance,
" I may want to reload after committing and only be able to undo to that point.
try
  set undoreload=0
catch
  " Pre vim7.3
endtry

" Remove all autocommands, in case we are sourced twice.  That's what vim's
" help says to do if you use autocommands, so I'm doing it.
autocmd!

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50    " keep 50 lines of command line history
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set visualbell    " Don't beep at me when I hit Esc twice

" Turn on syntax highlighting, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Do proper indenting per language.  There is a directory full of indenting
" rules that gets installed with vim, like python.vim and ruby.vim; mine was
" /usr/share/vim/vim72/ftplugin/.
filetype plugin indent on 

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" When creating new files, use a template if we have one in templates/
autocmd BufNewFile * silent! 0r ~/.vim/templates/template.%:e

" ****************** SCROLLING *********************  

set scrolloff=1      " Number of lines from vertical edge to start scrolling
set sidescrolloff=1  " Number of cols from horizontal edge to start scrolling
set sidescroll=1     " Number of cols to scroll at a time

" ****************** SPLITTING *********************  
set splitright " vsplit makes new pane to the right (not left)
set splitbelow " split  makes new pane below (not above)

" ****************** SEARCHING *********************  
set incsearch     " do incremental searching
set ignorecase    " do case-insensitive searches
set smartcase     " ... unless the search contains upper-case characters
set hlsearch      " highlight all matched terms
" Pressing return clears highlighted search
:nnoremap <CR> :nohlsearch<CR>/<BS>
" Pressing control + return also clears (for use in NERDTree)
:nnoremap <c-CR> :nohlsearch<CR>/<BS>

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

" **************** CONVENIENCE MAPPINGS ************  
" Set the leader key to comma (normally, it's "\")
let mapleader = ","
"
" Ctrl-L recolors the screen when it gets confused.
noremap <c-l> <c-l>:syntax sync fromstart<CR>
inoremap <c-l> <esc><c-l>:syntax sync fromstart<CR>a

" If you type :W<cr>, save anyway.
command! W w

" If you type q: you really meant to type :q .
" q: originally opens a command history window, which you can get to by typing
" :<Ctrl-F> instead.
map q: :q

" ctrl+w ctrl+w in insert mode should do the same thing as in normal mode
" (change windows)
imap <C-w><C-w> <esc><C-w><C-w>

" Move one (or more if selected) lines up and down
nmap <C-J> :m +1 <CR>
nmap <C-K> :m -2 <CR>

" <cr> should not only clear highlighted search, but flash the current
" cursor location.
:nnoremap <CR> :nohlsearch<CR>:set cul cuc<cr>:sleep 100m<cr>:set nocul nocuc<cr>/<BS>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>


" ***************** TABS ***************************  
" Usually, you want 2 spaces per tab, so these lines make this the default.
" There are ways to make vi do clever things with tabs in different
" situations, like MS Word can, but I *always* want tab to behave the same way
" -- so I set all three of these tab-related values the same.
" (To overrride these per file type, put commands in .vim/ftplugin/)
set tabstop=2
set softtabstop=2
set shiftwidth=2

set expandtab " insert spaces instead of tab characters
set smarttab  " backspace over a tab will remove a tab's worth of space

" *********** HIDDEN CHARACTERS *********
" Beautify display of hidden characters (tabs, line breaks, etc).
" (`:set list!` to toggle display; `:help listchars` for info )
set listchars=nbsp:☠,trail:⋅,tab:▸\ ,eol:¬,extends:❯,precedes:❮

" On save of a Python file, strip trailing whitespaces.
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre *.py :call <SID>StripTrailingWhitespaces()

" *************** Tab completion ****************
" src: http://vim.wikia.com/wiki/Smart_mapping_for_tab_completion
" A different approach to completion is here:
" https://github.com/skwp/dotfiles/blob/master/vimrc
let g:omni_support=1

function! Smart_TabComplete()
  let line = getline('.')                         " curline
  let substr = strpart(line, -1, col('.'))        " from start to cursor
  let substr = matchstr(substr, "[^ \t.]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

inoremap <tab> <c-r>=Smart_TabComplete()<CR>


" **************** PLUGINS *************************  
" ************ Pathogen ****************
" Get Pathogen plugin to load other plugins - all files, recursively, from
" the path specified
call pathogen#infect('~/.vim/bundle')

" ************ TaskList ****************
" Leader t opens TaskList. Mnemonic: t for "TODO"
" '<CR>' jumps to highlighted TODO; 'q' quits
" Uncommenting the below actually *breaks* tasklist, I think because 
" TaskList includes the map command inside tasklist.vim itself.  I'm
" keeping the below line here just so we remember than tasklist exists
" and is useful!
" nnoremap <silent> <Leader>t <Plug>TaskList

" ************ NERDTree ****************
" Leader f opens NERDTree. Mnemonic: f for "Files"
nnoremap <silent> <Leader>f :NERDTreeToggle<CR>
" Leader v opens NERDTree to current file. Mnemonic: v for "Viles"
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
" Quit vim if NERDTree is only open window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ************ CtrlP (File Finder) ****************
" - Pressing <control + p> starts it.
" - <ctrl + j/k> moves between matches. 
" - Enter opens in new vsplit. <ctrl + v> opens in same window (with config below).
" - ctrl+f changes modes. MRU means 'Most Recently Used'. 
" - <ctrl + r> toggles regexp/fuzzy search; regexp is also nice for exact filenames
"
" Edit these mappings to change what keys do in CtrlP.  See
" https://github.com/ctrlpvim/ctrlp.vim/blob/master/doc/ctrlp.txt, search for
" 'ctrlp_prompt_mappings'.
" Swap so that <cr> opens in new split and <c-v> opens in current window.
" let g:ctrlp_prompt_mappings = {'AcceptSelection("e")': ['<c-h>'], 'AcceptSelection("h")': ['<cr>', '2-LeftMouse'], }
" Search files returned by one of these commands, depending on whether you
" find .git in the directory or not.
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others']
    \ },
  \ 'fallback': 'find %s -type f'
  \ }


" ************** COLOR SCHEME ************
" Set to Solarized colorscheme which works on lots of platforms and looks nice
syntax enable
set background=dark
" Necessary in mintty for background to be blue, not black, in vim, even
" after setting mintty's terminal colors to solarized's via a script

let g:solarized_termtrans=1

" Let F5 trigger changing Solarized themes
call togglebg#map("<F5>")
colorscheme solarized


" If there are any machine-specific tweaks for Vim, load them from the following file.
try 
  source ~/.vimrc_machine_specific
catch
  " No such file? No problem; just ignore it.
endtry 
